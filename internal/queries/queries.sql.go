// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package queries

import (
	"context"
)

const getCheckConstraints = `-- name: GetCheckConstraints :many
SELECT pg_constraint.oid,
       conname::TEXT                            as name,
       pg_class.relname::TEXT                   as table_name,
       pg_catalog.pg_get_expr(conbin, conrelid) as expression,
       convalidated                             as is_valid,
       connoinherit                             as is_not_inheritable
FROM pg_catalog.pg_constraint
         JOIN pg_catalog.pg_class ON pg_constraint.conrelid = pg_class.oid
WHERE pg_class.relnamespace = (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'public')
  AND contype = 'c'
  AND pg_constraint.conislocal
`

type GetCheckConstraintsRow struct {
	Oid              interface{}
	Name             string
	TableName        string
	Expression       string
	IsValid          bool
	IsNotInheritable bool
}

func (q *Queries) GetCheckConstraints(ctx context.Context) ([]GetCheckConstraintsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCheckConstraints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCheckConstraintsRow
	for rows.Next() {
		var i GetCheckConstraintsRow
		if err := rows.Scan(
			&i.Oid,
			&i.Name,
			&i.TableName,
			&i.Expression,
			&i.IsValid,
			&i.IsNotInheritable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getColumnsForIndex = `-- name: GetColumnsForIndex :many
SELECT a.attname::TEXT AS column_name
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $1
  AND a.attnum > 0
ORDER BY a.attnum
`

func (q *Queries) GetColumnsForIndex(ctx context.Context, attrelid interface{}) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getColumnsForIndex, attrelid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var column_name string
		if err := rows.Scan(&column_name); err != nil {
			return nil, err
		}
		items = append(items, column_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getColumnsForTable = `-- name: GetColumnsForTable :many
SELECT a.attname::TEXT                                                AS column_name,
       pg_catalog.format_type(a.atttypid, a.atttypmod)                AS column_type,
       COALESCE(coll.collname, '')::TEXT                              AS collation_name,
       COALESCE(collation_namespace.nspname, '')::TEXT                AS collation_schema_name,
       COALESCE(pg_catalog.pg_get_expr(d.adbin, d.adrelid), '')::TEXT AS default_value,
       a.attnotnull                                                   AS is_not_null,
       a.attlen                                                       AS column_size
FROM pg_catalog.pg_attribute a
         LEFT JOIN pg_catalog.pg_attrdef d ON (d.adrelid = a.attrelid AND d.adnum = a.attnum)
         LEFT JOIN pg_catalog.pg_collation coll ON coll.oid = a.attcollation
         LEFT JOIN pg_catalog.pg_namespace collation_namespace ON collation_namespace.oid = coll.collnamespace
WHERE a.attrelid = $1
  AND a.attnum > 0
  AND NOT a.attisdropped
ORDER BY a.attnum
`

type GetColumnsForTableRow struct {
	ColumnName          string
	ColumnType          string
	CollationName       string
	CollationSchemaName string
	DefaultValue        string
	IsNotNull           bool
	ColumnSize          int16
}

func (q *Queries) GetColumnsForTable(ctx context.Context, attrelid interface{}) ([]GetColumnsForTableRow, error) {
	rows, err := q.db.QueryContext(ctx, getColumnsForTable, attrelid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetColumnsForTableRow
	for rows.Next() {
		var i GetColumnsForTableRow
		if err := rows.Scan(
			&i.ColumnName,
			&i.ColumnType,
			&i.CollationName,
			&i.CollationSchemaName,
			&i.DefaultValue,
			&i.IsNotNull,
			&i.ColumnSize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDependsOnFunctions = `-- name: GetDependsOnFunctions :many
SELECT proc.proname::TEXT                                      as func_name,
       pg_catalog.pg_get_function_identity_arguments(proc.oid) as func_identity_arguments,
       proc_namespace.nspname::TEXT                            as func_schema_name
FROM pg_catalog.pg_depend depend
         JOIN pg_catalog.pg_proc proc ON depend.refobjid = proc.oid
         JOIN pg_catalog.pg_namespace proc_namespace ON proc.pronamespace = proc_namespace.oid
WHERE depend.objid = $1
  AND depend.deptype = 'n'
`

type GetDependsOnFunctionsRow struct {
	FuncName              string
	FuncIdentityArguments string
	FuncSchemaName        string
}

func (q *Queries) GetDependsOnFunctions(ctx context.Context, objid interface{}) ([]GetDependsOnFunctionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDependsOnFunctions, objid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDependsOnFunctionsRow
	for rows.Next() {
		var i GetDependsOnFunctionsRow
		if err := rows.Scan(&i.FuncName, &i.FuncIdentityArguments, &i.FuncSchemaName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFunctions = `-- name: GetFunctions :many
SELECT proc.oid,
       proname::TEXT                                           as func_name,
       pg_catalog.pg_get_function_identity_arguments(proc.oid) as func_identity_arguments,
       proc_namespace.nspname::TEXT                            as func_schema_name,
       pg_catalog.pg_get_functiondef(proc.oid)                 as func_def,
       proc_lang.lanname::TEXT                                 as func_lang
FROM pg_catalog.pg_proc proc
         JOIN pg_catalog.pg_namespace proc_namespace ON proc.pronamespace = proc_namespace.oid
         JOIN pg_catalog.pg_language proc_lang ON proc_lang.oid = proc.prolang
WHERE proc_namespace.nspname = 'public'
  AND proc.prokind = 'f'
  -- Exclude functions belonging to extensions
  AND NOT EXISTS(SELECT depend.objid FROM pg_catalog.pg_depend depend WHERE deptype = 'e' AND depend.objid = proc.oid)
`

type GetFunctionsRow struct {
	Oid                   interface{}
	FuncName              string
	FuncIdentityArguments string
	FuncSchemaName        string
	FuncDef               string
	FuncLang              string
}

func (q *Queries) GetFunctions(ctx context.Context) ([]GetFunctionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFunctions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFunctionsRow
	for rows.Next() {
		var i GetFunctionsRow
		if err := rows.Scan(
			&i.Oid,
			&i.FuncName,
			&i.FuncIdentityArguments,
			&i.FuncSchemaName,
			&i.FuncDef,
			&i.FuncLang,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndexes = `-- name: GetIndexes :many
SELECT c.oid                                        AS oid,
       c.relname::TEXT                              as index_name,
       table_c.relname::TEXT                        as table_name,
       pg_catalog.pg_get_indexdef(c.oid)::TEXT      as def_stmt,
       COALESCE(con.conname, '')::TEXT              as constraint_name,
       i.indisvalid                                 as index_is_valid,
       i.indisprimary                               as index_is_pk,
       i.indisunique                                AS index_is_unique,
       COALESCE(parent_c.relname, '')::TEXT         as parent_index_name,
       COALESCE(parent_namespace.nspname, '')::TEXT as parent_index_schema_name
FROM pg_catalog.pg_class c
         INNER JOIN pg_catalog.pg_index i ON (i.indexrelid = c.oid)
         INNER JOIN pg_catalog.pg_class table_c ON (table_c.oid = i.indrelid)
         LEFT JOIN pg_catalog.pg_constraint con ON (con.conindid = c.oid)
         LEFT JOIN pg_catalog.pg_inherits inherits ON (c.oid = inherits.inhrelid)
         LEFT JOIN pg_catalog.pg_class parent_c ON (inherits.inhparent = parent_c.oid)
         LEFT JOIN pg_catalog.pg_namespace as parent_namespace ON parent_c.relnamespace = parent_namespace.oid
WHERE c.relnamespace = (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'public')
  AND (c.relkind = 'i' OR c.relkind = 'I')
`

type GetIndexesRow struct {
	Oid                   interface{}
	IndexName             string
	TableName             string
	DefStmt               string
	ConstraintName        string
	IndexIsValid          bool
	IndexIsPk             bool
	IndexIsUnique         bool
	ParentIndexName       string
	ParentIndexSchemaName string
}

func (q *Queries) GetIndexes(ctx context.Context) ([]GetIndexesRow, error) {
	rows, err := q.db.QueryContext(ctx, getIndexes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIndexesRow
	for rows.Next() {
		var i GetIndexesRow
		if err := rows.Scan(
			&i.Oid,
			&i.IndexName,
			&i.TableName,
			&i.DefStmt,
			&i.ConstraintName,
			&i.IndexIsValid,
			&i.IndexIsPk,
			&i.IndexIsUnique,
			&i.ParentIndexName,
			&i.ParentIndexSchemaName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTables = `-- name: GetTables :many
SELECT c.oid                                        AS oid,
       c.relname::TEXT                              AS table_name,
       COALESCE(parent_c.relname, '')::TEXT         AS parent_table_name,
       COALESCE(parent_namespace.nspname, '')::TEXT AS parent_table_schema_name,
       (CASE
            WHEN c.relkind = 'p' THEN pg_catalog.pg_get_partkeydef(c.oid)
            ELSE ''
           END)::text
                                                    AS partition_key_def,
       (CASE
            WHEN c.relispartition THEN pg_catalog.pg_get_expr(c.relpartbound, c.oid)
            ELSE ''
           END)::text                               AS partition_for_values
FROM pg_catalog.pg_class c
         LEFT JOIN pg_catalog.pg_inherits inherits ON inherits.inhrelid = c.oid
         LEFT JOIN pg_catalog.pg_class parent_c ON inherits.inhparent = parent_c.oid
         LEFT JOIN pg_catalog.pg_namespace as parent_namespace ON parent_c.relnamespace = parent_namespace.oid
WHERE c.relnamespace = (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'public')
  AND (c.relkind = 'r' OR c.relkind = 'p')
`

type GetTablesRow struct {
	Oid                   interface{}
	TableName             string
	ParentTableName       string
	ParentTableSchemaName string
	PartitionKeyDef       string
	PartitionForValues    string
}

func (q *Queries) GetTables(ctx context.Context) ([]GetTablesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTables)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTablesRow
	for rows.Next() {
		var i GetTablesRow
		if err := rows.Scan(
			&i.Oid,
			&i.TableName,
			&i.ParentTableName,
			&i.ParentTableSchemaName,
			&i.PartitionKeyDef,
			&i.PartitionForValues,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTriggers = `-- name: GetTriggers :many
SELECT trig.tgname::TEXT                                       as trigger_name,
       owning_c.relname::TEXT                                  as owning_table_name,
       owning_c_namespace.nspname::TEXT                        as owning_table_schema_name,
       proc.proname::TEXT                                      as func_name,
       pg_catalog.pg_get_function_identity_arguments(proc.oid) as func_identity_arguments,
       proc_namespace.nspname::TEXT                            as func_schema_name,
       pg_catalog.pg_get_triggerdef(trig.oid)                  as trigger_def
FROM pg_catalog.pg_trigger trig
         JOIN pg_catalog.pg_class owning_c ON trig.tgrelid = owning_c.oid
         JOIN pg_catalog.pg_namespace owning_c_namespace ON owning_c.relnamespace = owning_c_namespace.oid
         JOIN pg_catalog.pg_proc proc ON trig.tgfoid = proc.oid
         JOIN pg_catalog.pg_namespace proc_namespace ON proc.pronamespace = proc_namespace.oid
WHERE proc_namespace.nspname = 'public'
  AND owning_c_namespace.nspname = 'public'
  AND trig.tgparentid = 0
  AND NOT trig.tgisinternal
`

type GetTriggersRow struct {
	TriggerName           string
	OwningTableName       string
	OwningTableSchemaName string
	FuncName              string
	FuncIdentityArguments string
	FuncSchemaName        string
	TriggerDef            string
}

func (q *Queries) GetTriggers(ctx context.Context) ([]GetTriggersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTriggers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTriggersRow
	for rows.Next() {
		var i GetTriggersRow
		if err := rows.Scan(
			&i.TriggerName,
			&i.OwningTableName,
			&i.OwningTableSchemaName,
			&i.FuncName,
			&i.FuncIdentityArguments,
			&i.FuncSchemaName,
			&i.TriggerDef,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
